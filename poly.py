# This file was *autogenerated* from the file poly.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_190 = Integer(190); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_500 = Integer(500); _sage_const_0 = Integer(0)
for p in range(_sage_const_190 ,_sage_const_500 ):
        if is_prime(p) and p%_sage_const_6 ==_sage_const_1 :
                count = _sage_const_0  # cuente los PP       

                l = [] # Guarda los PP evaluados para verificar que no se repitan los resultados        

                k = GF(p) # Crea el CF  

                R = PolynomialRing(GF(p),_sage_const_1 ,"x", names=('x',)); (x,) = R._first_ngens(1)

                for a in range(_sage_const_1 , p): # Fija a
                        for b in range(_sage_const_1 , p): # Fija b
                                R = PolynomialRing(GF(p),_sage_const_1 ,"x", names=('x',)); (x,) = R._first_ngens(1)
                                f = (x**((p+_sage_const_1 )/_sage_const_2 )) + (a * x**((p+_sage_const_5 )/_sage_const_6 )) + (b * x) # El polinomio
                                for x in range(_sage_const_1 , p): # Evalua el poly
                                        value = f(x)
                                        if(l.count(value) == _sage_const_0 ): # Verifica que no se repitan los resultados
                                                l.append(f(x)) # si no se repite inserta el resultado en la lista
                                                if(x == p-_sage_const_1 ): # verifica si x llego al final de for
                                                        count = count + _sage_const_1  # aumenta en 1 cuando encuentra un PP
                                                        # print str(a) + ", " +  str(b) # imprime la a y b que producieron el PP
                                        else: # si se repiten res
                                                l = [] # limpia la lista
                                                break # rompe el ciclo
                print str(p)+", "+str(count)
