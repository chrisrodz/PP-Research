# This file was *autogenerated* from the file VS.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_37 = Integer(37)
count = _sage_const_0  # cuente los PP 

l = set() # Guarda los PP evaluados para verificar que no se repitan los resultados

p = _sage_const_37  # Tamano del  cuerpo

d_1 = _sage_const_2 

d_2 = _sage_const_3 

a = _sage_const_4 

b = _sage_const_3 

k = GF(p) # Crea el CF 

R = PolynomialRing(GF(p),_sage_const_1 ,"x", names=('x',)); (x,) = R._first_ngens(1)# Crea el anillo de polinomios utilizando
"""
for a in range(1, p): # Fija a
        for b in range(1, p): # Fija b
                R.<x> = PolynomialRing(GF(p),1,"x")
                f = (x^(((p-1)/d_1)+1)) + (a * x^(((p-1)/d_2)+1)) + (b * x) # El polinomio
                for x in range(1, p): # Evalua el poly
                        value = f(x)
                        l.add(value) # si no se repite inserta el resultado en la lista
                        count = count + 1 # aumenta en 1 cuando encuentra un PP
                print "a: " + str(a) + ", b: " +  str(b) + " VS: " + str(len(l)) # imprime la a y b que producieron el PP
                l = set()
                count = 0
"""

R = PolynomialRing(GF(p),_sage_const_1 ,"x", names=('x',)); (x,) = R._first_ngens(1)
f = (x**(((p-_sage_const_1 )/d_1)+_sage_const_1 )) + (a * x**(((p-_sage_const_1 )/d_2)+_sage_const_1 )) + (b * x) # El polinomio
for x in range(_sage_const_1 , p): # Evalua el poly
        value = f(x)
        l.add(value) # si no se repite inserta el resultado en la lista
        count = count + _sage_const_1  # aumenta en 1 cuando encuentra un PP
print "a: " + str(a) + ", b: " +  str(b) + " VS: " + str(len(l)) # imprime la a y b que producieron el PP
print l
l = set()
count = _sage_const_0 
